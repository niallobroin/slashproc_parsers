#!/usr/bin/env python

from slashproc_parser.basic_parser import BasicSPParser
from parse_helpers import traverse_directory


class SysDev(BasicSPParser):

    DEV = "/proc/sys/dev"

    @staticmethod
    def get_groups():
        """
        """
        _, parents, all_variables = traverse_directory(SysDev.DEV)

        # no need to take into account variables
        for var in all_variables:
            del parents[var]

        groups = {'sysvm': {'label': 'Debug system variables', 'parents': ['root']}}

        for i in parents.keys():
            groups[SysDev.key_format(i)] = {
                'label': i,
                'desc': '',
                'parents': parents[i]
            }

        return groups

    @staticmethod
    def get_vars():
        """
        """
        thevars = dict()
        _, parents, all_variables = traverse_directory(SysDev.DEV)

        for var in all_variables:
            thevars[SysDev.key_format(var)] = {
                'label': var,
                'unit': '',
                'parents': parents[var]
            }

        # TODO: fill with variables and appropriate descriptions
        descs = {
            'raw': {
                'desc': "The full sys/dev log",
                'label': "Sys DEV Full",
                'parents': ['dev']
            },

            'autoclose': {
                'desc': "If enabled (1), the drive(s) will close tray upon mount request. It is the default",
                'label': "Auto Close",
                'parents': ['dev']
            },

            'autoeject': {
                'desc': "If enabled (1), the drive(s) will eject media after unmount request. The default is 0 (don't eject on unmount)",
                'label': "Auto Eject",
                'parents': ['dev']
            },

            'check_media': {
                'desc': "Check media type capability status. Disabled (0) by default",
                'label': "Check Media Type Capability",
                'parents': ['dev']
            },

            'debug': {
                'desc': "Turn on (1) or off (0) debugging messages of the CD-ROM device driver. Off by default",
                'label': "Debugging Messages",
                'parents': ['dev']
            },

            'info': {
                'desc': "Contains general information about the CD-ROM drives attached to the system",
                'label': "CD-ROM Info",
                'parents': ['dev']
            },

            'lock': {
                'desc': "If enabled (1), lock the door on device open. It is the default",
                'label': "Lock the Door on SysDevice Open",
                'parents': ['dev']
            },

            'hpet': {
                'desc': "The High Precision Event Timer (HPET) hardware is the future replacement for the 8254 and Real Time Clock (RTC) periodic timer functionality",
                'label': "High Precision Event Timer",
                'parents': ['dev']
            },

            'max-user-freq': {
                'desc': "Allows user to define the upper limit of number of interrupts generated by the HPET driver. The default value is 64",
                'label': "Limit of Number of Interrupts by HPET",
                'parents': ['dev']
            },

            'parport': {
                'desc': "Contains information about the parallel ports of your system. It has one subdirectory for each port, named after the port number (0, 1, 2...).",
                'label': "Parallel Ports",
                'parents': ['dev']
            },

            'spintime': {
                'desc': "The default for spintime. When a new port is registered, it picks up the default spintime",
                'label': "SpinTime",
                'parents': ['dev']
            },

            'timeslice': {
                'desc': "The default for timeslice. When a new device is registered, it picks up the default timeslice",
                'label': "TimeSlice",
                'parents': ['dev']
            },

            'autoprobe': {
                'desc': "Any IEEE-1284 device ID information that has been acquired from the (non-IEEE 1284.3) device",
                'label': "AutoProbe",
                'parents': ['dev']
            },

            'autoprobe0': {
                'desc': "IEEE 1284 device ID information retrieved from daisy-chain devices that conform to IEEE 1284.3",
                'label': "AutoProbe 0",
                'parents': ['dev']
            },

            'autoprobe1': {
                'desc': "EEE 1284 device ID information retrieved from daisy-chain devices that conform to IEEE 1284.3",
                'label': "AutoProbe 1",
                'parents': ['dev']
            },

            'autoprobe2': {
                'desc': "IEEE 1284 device ID information retrieved from daisy-chain devices that conform to IEEE 1284.3",
                'label': "AutoProbe 2",
                'parents': ['dev']
            },

            'autoprobe3': {
                'desc': "IEEE 1284 device ID information retrieved from daisy-chain devices that conform to IEEE 1284.3",
                'label': "AutoProbe 3",
                'parents': ['dev']
            },

            'base-addr': {
                'desc': "Parallel port's base address, or addresses if the port has more than one in which case they are separated with tabs. These values might not have any sensible meaning for some ports",
                'label': "Base Address of Parallel Port",
                'parents': ['dev']
            },

            'active': {
                'desc': "A list of the device drivers using that port. A '+' will appear by the name of the device currently using the port (it might not appear against any). The string 'none' means that there are no device drivers using that port",
                'label': "Active",
                'parents': ['dev']
            },

            'dma': {
                'desc': "Parallel port's DMA channel, or -1 if none is being used",
                'label': "DMA Channel",
                'parents': ['dev']
            },

            'irq': {
                'desc': "Parallel port's IRQ, or -1 if none is being used",
                'label': "Parallel Port's IRQ",
                'parents': ['dev']
            },

            'modes': {
                'desc': "Parallel port's hardware modes, comma-separated",
                'label': "Parallel Port's Hardware Modes",
                'parents': ['dev']
            },

            'raid': {
                'desc': "Used to control RAID reconstruction speed",
                'label': "RAID",
                'parents': ['dev']
            },

            'speed_limit_max': {
                'desc': "RAID reconstruction code is expected to only access disks when there is no disk activity due to applications. With this tunable you can set the maximum speed in KB/s in that case. The default is 200000 KB/s",
                'label': "Speed Limit Maximum",
                'parents': ['dev']
            },

            'speed_limit_min': {
                'desc': "RAID reconstruction code is expected to only access disks when there is no disk activity due to applications, with a guaranteed minimum set by this tunable (in KB/s). The default value is 1000 KB/s",
                'label': "Speed Limit Minimum",
                'parents': ['dev']
            },

            'rtc': {
                'desc': "Configuration of the real time clock (RTC) driver",
                'label': "Real Time Clock",
                'parents': ['dev']
            },

            'scsi': {
                'desc': "Configuration of the SCSI driver",
                'label': "SCSI Driver",
                'parents': ['dev']
            },

            'logging_level': {
                'desc': "Defines the scsi logging feature. It is a means by which the user can select how much information they get about various goings on, and it can be really useful for fault tracing. The logging word is divided into 8 nibbles, each of which describes a loglevel",
                'label': "Logging Level",
                'parents': ['dev']
            },

        }
        return thevars

    @staticmethod
    def get_data(verbose=False):
        """
        """
        tree, _, _ = traverse_directory(SysDev.DEV, verbose=verbose)
        return tree


if __name__ == "__main__":
    d = SysDev()
    d.test_parse()
